begin to word analyze ````
RetrivalCode finished !

Word Analyze Succeed !
Begin Loading C Grammar¡¤¡¤¡¤
Load Action Goto Chart or Computer ?( L or C)
Total None Terminates : 57
Total Right Productions :198
Finished Loading C Grammar!


FRIST Sets :
argument-expression-list	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	~	

assignment-expression	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	~	

exclusive-OR-expression	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	~	

inclusive-OR-expression	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	~	

unary-operator	 :   !	&	*	+	-	~	

conditional-expression	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	~	

declarator	 :   (	*	identifier	

identifier-list	 :   identifier	

type-qualifier-list	 :   const	volatile	

type-specifier	 :   char	double	float	int	long	short	signed	unsigned	void	

abstract-declarator	 :   (	*	[	

cast-expression	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	~	

expression-statement	 :   !	&	(	*	+	++	-	--	;	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	~	

pointer	 :   *	

unary-expression	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	~	

external-declaration	 :   (	*	auto	char	const	double	extern	float	identifier	int	long	register	short	signed	static	typedef	unsigned	void	volatile	

function-definition	 :   (	*	auto	char	const	double	extern	float	identifier	int	long	register	short	signed	static	typedef	unsigned	void	volatile	

init-declarator	 :   (	*	identifier	

multiplicative-expression	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	~	

storage-class-specifier	 :   auto	extern	register	static	typedef	

declaration	 :   auto	char	const	double	extern	float	int	long	register	short	signed	static	typedef	unsigned	void	volatile	

declaration-list	 :   auto	char	const	double	extern	float	int	long	register	short	signed	static	typedef	unsigned	void	volatile	

equality-expression	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	~	

logical-AND-expression	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	~	

type-name	 :   char	const	double	float	int	long	short	signed	unsigned	void	volatile	

AND-expression	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	~	

constant-expression	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	~	

jump-statement	 :   break	continue	goto	return	

logical-OR-expression	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	~	

parameter-declaration	 :   auto	char	const	double	extern	float	int	long	register	short	signed	static	typedef	unsigned	void	volatile	

parameter-list	 :   auto	char	const	double	extern	float	int	long	register	short	signed	static	typedef	unsigned	void	volatile	

selection-statement	 :   if	switch	

translation-unit	 :   (	*	auto	char	const	double	extern	float	identifier	int	long	register	short	signed	static	typedef	unsigned	void	volatile	

typedef-name	 :   identifier	

additive-expression	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	~	

specifier-qualifier-list	 :   char	const	double	float	int	long	short	signed	unsigned	void	volatile	

STARTER	 :   (	*	auto	char	const	double	extern	float	identifier	int	long	register	short	signed	static	typedef	unsigned	void	volatile	

initializer	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	{	~	

labeled-statement	 :   case	default	identifier	

statement	 :   !	&	(	*	+	++	-	--	;	break	case	character-constant	continue	default	do	enumeration-constant	floating-constant	for	goto	identifier	if	integer-constant	return	sizeof	string-constant	switch	while	{	~	

type-qualifier	 :   const	volatile	

assignment-operator	 :   %=	&=	*=	+=	-=	/=	<<=	=	>>=	^=	|=	

initializer-list	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	{	~	

compound-statement	 :   {	

parameter-type-list	 :   auto	char	const	double	extern	float	int	long	register	short	signed	static	typedef	unsigned	void	volatile	

postfix-expression	 :   (	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	string-constant	

primary-expression	 :   (	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	string-constant	

direct-declarator	 :   (	identifier	

iteration-statement	 :   do	for	while	

direct-abstract-declarator	 :   (	[	

expression	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	~	

shift-expression	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	~	

statement-list	 :   !	&	(	*	+	++	-	--	;	break	case	character-constant	continue	default	do	enumeration-constant	floating-constant	for	goto	identifier	if	integer-constant	return	sizeof	string-constant	switch	while	{	~	

constant	 :   character-constant	enumeration-constant	floating-constant	integer-constant	string-constant	

declaration-specifiers	 :   auto	char	const	double	extern	float	int	long	register	short	signed	static	typedef	unsigned	void	volatile	

init-declarator-list	 :   (	*	identifier	

relational-expression	 :   !	&	(	*	+	++	-	--	character-constant	enumeration-constant	floating-constant	identifier	integer-constant	sizeof	string-constant	~	



None Terminals :	Total count :	57
	argument-expression-list	assignment-expression	exclusive-OR-expression	inclusive-OR-expression	unary-operator	conditional-expression	declarator	identifier-list	type-qualifier-list	type-specifier	abstract-declarator	cast-expression	expression-statement	pointer	unary-expression	external-declaration	function-definition	init-declarator	multiplicative-expression	storage-class-specifier	declaration	declaration-list	equality-expression	logical-AND-expression	type-name	AND-expression	constant-expression	jump-statement	logical-OR-expression	parameter-declaration	parameter-list	selection-statement	translation-unit	typedef-name	additive-expression	specifier-qualifier-list	STARTER	initializer	labeled-statement	statement	type-qualifier	assignment-operator	initializer-list	compound-statement	parameter-type-list	postfix-expression	primary-expression	direct-declarator	iteration-statement	direct-abstract-declarator	expression	shift-expression	statement-list	constant	declaration-specifiers	init-declarator-list	relational-expression

Terminals :	Total count :	80
	!	!=	%	%=	&	&&	&=	(	)	*	*=	+	++	+=	,	-	--	-=	->	...	/	/=	:	;	<	<<	<<=	<=	=	==	>	>=	>>	>>=	?	[	]	^	^=	auto	break	case	char	character-constant	const	continue	default	do	double	else	enumeration-constant	extern	float	floating-constant	for	goto	identifier	if	int	integer-constant	long	register	return	short	signed	sizeof	static	string-constant	switch	typedef	unsigned	void	volatile	while	{	|	|=	||	}	~

state : 0		Size : 1
STARTER -->  ¡ñ translation-unit  

state : 1		Size : 1
direct-declarator --> (   ¡ñ declarator  )  

state : 2		Size : 4
pointer --> *   ¡ñ 
pointer --> *   ¡ñ pointer  
pointer --> *   ¡ñ type-qualifier-list  
pointer --> *   ¡ñ type-qualifier-list  pointer  

state : 3		Size : 1
storage-class-specifier --> auto   ¡ñ 

state : 4		Size : 1
type-specifier --> char   ¡ñ 

state : 5		Size : 1
type-qualifier --> const   ¡ñ 

state : 6		Size : 1
external-declaration --> declaration   ¡ñ 

state : 7		Size : 4
declaration --> declaration-specifiers   ¡ñ ;  
function-definition --> declaration-specifiers   ¡ñ declarator  compound-statement  
function-definition --> declaration-specifiers   ¡ñ declarator  declaration-list  compound-statement  
declaration --> declaration-specifiers   ¡ñ init-declarator-list  ;  

state : 8		Size : 2
function-definition --> declarator   ¡ñ compound-statement  
function-definition --> declarator   ¡ñ declaration-list  compound-statement  

state : 9		Size : 6
declarator --> direct-declarator   ¡ñ 
direct-declarator --> direct-declarator   ¡ñ (  )  
direct-declarator --> direct-declarator   ¡ñ (  identifier-list  )  
direct-declarator --> direct-declarator   ¡ñ (  parameter-type-list  )  
direct-declarator --> direct-declarator   ¡ñ [  ]  
direct-declarator --> direct-declarator   ¡ñ [  constant-expression  ]  

state : 10		Size : 1
type-specifier --> double   ¡ñ 

state : 11		Size : 1
storage-class-specifier --> extern   ¡ñ 

state : 12		Size : 1
translation-unit --> external-declaration   ¡ñ 

state : 13		Size : 1
type-specifier --> float   ¡ñ 

state : 14		Size : 1
external-declaration --> function-definition   ¡ñ 

state : 15		Size : 1
direct-declarator --> identifier   ¡ñ 

state : 16		Size : 1
type-specifier --> int   ¡ñ 

state : 17		Size : 1
type-specifier --> long   ¡ñ 

state : 18		Size : 1
declarator --> pointer   ¡ñ direct-declarator  

state : 19		Size : 1
storage-class-specifier --> register   ¡ñ 

state : 20		Size : 1
type-specifier --> short   ¡ñ 

state : 21		Size : 1
type-specifier --> signed   ¡ñ 

state : 22		Size : 1
storage-class-specifier --> static   ¡ñ 

state : 23		Size : 2
declaration-specifiers --> storage-class-specifier   ¡ñ 
declaration-specifiers --> storage-class-specifier   ¡ñ declaration-specifiers  

state : 24		Size : 2
STARTER --> translation-unit   ¡ñ 
translation-unit --> translation-unit   ¡ñ external-declaration  

state : 25		Size : 2
declaration-specifiers --> type-qualifier   ¡ñ 
declaration-specifiers --> type-qualifier   ¡ñ declaration-specifiers  

state : 26		Size : 2
declaration-specifiers --> type-specifier   ¡ñ 
declaration-specifiers --> type-specifier   ¡ñ declaration-specifiers  

state : 27		Size : 1
storage-class-specifier --> typedef   ¡ñ 

state : 28		Size : 1
type-specifier --> unsigned   ¡ñ 

state : 29		Size : 1
type-specifier --> void   ¡ñ 

state : 30		Size : 1
type-qualifier --> volatile   ¡ñ 

state : 31		Size : 1
direct-declarator --> (  declarator   ¡ñ )  

state : 32		Size : 1
pointer --> *  pointer   ¡ñ 

state : 33		Size : 3
pointer --> *  type-qualifier-list   ¡ñ 
pointer --> *  type-qualifier-list   ¡ñ pointer  
type-qualifier-list --> type-qualifier-list   ¡ñ type-qualifier  

state : 34		Size : 1
type-qualifier-list --> type-qualifier   ¡ñ 

state : 35		Size : 1
declaration --> declaration-specifiers  ;   ¡ñ 

state : 36		Size : 4
function-definition --> declaration-specifiers  declarator   ¡ñ compound-statement  
function-definition --> declaration-specifiers  declarator   ¡ñ declaration-list  compound-statement  
init-declarator --> declarator   ¡ñ 
init-declarator --> declarator   ¡ñ =  initializer  

state : 37		Size : 2
declaration --> declaration-specifiers  init-declarator-list   ¡ñ ;  
init-declarator-list --> init-declarator-list   ¡ñ ,  init-declarator  

state : 38		Size : 1
init-declarator-list --> init-declarator   ¡ñ 

state : 39		Size : 1
declaration-list --> declaration   ¡ñ 

state : 40		Size : 2
declaration-list --> declaration-list   ¡ñ declaration  
function-definition --> declarator  declaration-list   ¡ñ compound-statement  

state : 41		Size : 2
declaration --> declaration-specifiers   ¡ñ ;  
declaration --> declaration-specifiers   ¡ñ init-declarator-list  ;  

state : 42		Size : 1
function-definition --> declarator  compound-statement   ¡ñ 

state : 43		Size : 4
compound-statement --> {   ¡ñ declaration-list  statement-list  }  
compound-statement --> {   ¡ñ declaration-list  }  
compound-statement --> {   ¡ñ statement-list  }  
compound-statement --> {   ¡ñ }  

state : 44		Size : 3
direct-declarator --> direct-declarator  (   ¡ñ )  
direct-declarator --> direct-declarator  (   ¡ñ identifier-list  )  
direct-declarator --> direct-declarator  (   ¡ñ parameter-type-list  )  

state : 45		Size : 2
direct-declarator --> direct-declarator  [   ¡ñ ]  
direct-declarator --> direct-declarator  [   ¡ñ constant-expression  ]  

state : 46		Size : 6
direct-declarator --> direct-declarator   ¡ñ (  )  
direct-declarator --> direct-declarator   ¡ñ (  identifier-list  )  
direct-declarator --> direct-declarator   ¡ñ (  parameter-type-list  )  
direct-declarator --> direct-declarator   ¡ñ [  ]  
direct-declarator --> direct-declarator   ¡ñ [  constant-expression  ]  
declarator --> pointer  direct-declarator   ¡ñ 

state : 47		Size : 1
declaration-specifiers --> storage-class-specifier  declaration-specifiers   ¡ñ 

state : 48		Size : 1
translation-unit --> translation-unit  external-declaration   ¡ñ 

state : 49		Size : 1
declaration-specifiers --> type-qualifier  declaration-specifiers   ¡ñ 

state : 50		Size : 1
declaration-specifiers --> type-specifier  declaration-specifiers   ¡ñ 

state : 51		Size : 1
direct-declarator --> (  declarator  )   ¡ñ 

state : 52		Size : 1
pointer --> *  type-qualifier-list  pointer   ¡ñ 

state : 53		Size : 1
type-qualifier-list --> type-qualifier-list  type-qualifier   ¡ñ 

state : 54		Size : 2
declaration-list --> declaration-list   ¡ñ declaration  
function-definition --> declaration-specifiers  declarator  declaration-list   ¡ñ compound-statement  

state : 55		Size : 1
function-definition --> declaration-specifiers  declarator  compound-statement   ¡ñ 

state : 56		Size : 1
init-declarator --> declarator  =   ¡ñ initializer  

state : 57		Size : 1
declaration --> declaration-specifiers  init-declarator-list  ;   ¡ñ 

state : 58		Size : 1
init-declarator-list --> init-declarator-list  ,   ¡ñ init-declarator  

state : 59		Size : 1
declaration-list --> declaration-list  declaration   ¡ñ 

state : 60		Size : 1
function-definition --> declarator  declaration-list  compound-statement   ¡ñ 

state : 61		Size : 2
init-declarator --> declarator   ¡ñ 
init-declarator --> declarator   ¡ñ =  initializer  

state : 62		Size : 1
unary-operator --> !   ¡ñ 

state : 63		Size : 1
unary-operator --> &   ¡ñ 

state : 64		Size : 2
primary-expression --> (   ¡ñ expression  )  
cast-expression --> (   ¡ñ type-name  )  cast-expression  

state : 65		Size : 1
unary-operator --> *   ¡ñ 

state : 66		Size : 1
unary-operator --> +   ¡ñ 

state : 67		Size : 1
unary-expression --> ++   ¡ñ unary-expression  

state : 68		Size : 1
unary-operator --> -   ¡ñ 

state : 69		Size : 1
unary-expression --> --   ¡ñ unary-expression  

state : 70		Size : 1
expression-statement --> ;   ¡ñ 

state : 71		Size : 2
exclusive-OR-expression --> AND-expression   ¡ñ 
AND-expression --> AND-expression   ¡ñ &  equality-expression  

state : 72		Size : 3
shift-expression --> additive-expression   ¡ñ 
additive-expression --> additive-expression   ¡ñ +  multiplicative-expression  
additive-expression --> additive-expression   ¡ñ -  multiplicative-expression  

state : 73		Size : 1
expression --> assignment-expression   ¡ñ 

state : 74		Size : 1
jump-statement --> break   ¡ñ ;  

state : 75		Size : 1
labeled-statement --> case   ¡ñ constant-expression  :  statement  

state : 76		Size : 1
multiplicative-expression --> cast-expression   ¡ñ 

state : 77		Size : 1
constant --> character-constant   ¡ñ 

state : 78		Size : 1
statement --> compound-statement   ¡ñ 

state : 79		Size : 1
assignment-expression --> conditional-expression   ¡ñ 

state : 80		Size : 1
primary-expression --> constant   ¡ñ 

state : 81		Size : 1
jump-statement --> continue   ¡ñ ;  

state : 82		Size : 3
declaration-list --> declaration-list   ¡ñ declaration  
compound-statement --> {  declaration-list   ¡ñ statement-list  }  
compound-statement --> {  declaration-list   ¡ñ }  

state : 83		Size : 1
labeled-statement --> default   ¡ñ :  statement  

state : 84		Size : 1
iteration-statement --> do   ¡ñ statement  while  (  expression  )  ;  

state : 85		Size : 1
constant --> enumeration-constant   ¡ñ 

state : 86		Size : 3
AND-expression --> equality-expression   ¡ñ 
equality-expression --> equality-expression   ¡ñ !=  relational-expression  
equality-expression --> equality-expression   ¡ñ ==  relational-expression  

state : 87		Size : 2
inclusive-OR-expression --> exclusive-OR-expression   ¡ñ 
exclusive-OR-expression --> exclusive-OR-expression   ¡ñ ^  AND-expression  

state : 88		Size : 2
expression --> expression   ¡ñ ,  assignment-expression  
expression-statement --> expression   ¡ñ ;  

state : 89		Size : 1
statement --> expression-statement   ¡ñ 

state : 90		Size : 1
constant --> floating-constant   ¡ñ 

state : 91		Size : 8
iteration-statement --> for   ¡ñ (  ;  ;  )  statement  
iteration-statement --> for   ¡ñ (  ;  ;  expression  )  statement  
iteration-statement --> for   ¡ñ (  ;  expression  ;  )  statement  
iteration-statement --> for   ¡ñ (  ;  expression  ;  expression  )  statement  
iteration-statement --> for   ¡ñ (  expression  ;  ;  )  statement  
iteration-statement --> for   ¡ñ (  expression  ;  ;  expression  )  statement  
iteration-statement --> for   ¡ñ (  expression  ;  expression  ;  )  statement  
iteration-statement --> for   ¡ñ (  expression  ;  expression  ;  expression  )  statement  

state : 92		Size : 1
jump-statement --> goto   ¡ñ identifier  ;  

state : 93		Size : 2
primary-expression --> identifier   ¡ñ 
labeled-statement --> identifier   ¡ñ :  statement  

state : 94		Size : 2
selection-statement --> if   ¡ñ (  expression  )  statement  
selection-statement --> if   ¡ñ (  expression  )  statement  else  statement  

state : 95		Size : 2
logical-AND-expression --> inclusive-OR-expression   ¡ñ 
inclusive-OR-expression --> inclusive-OR-expression   ¡ñ |  exclusive-OR-expression  

state : 96		Size : 1
constant --> integer-constant   ¡ñ 

state : 97		Size : 1
statement --> iteration-statement   ¡ñ 

state : 98		Size : 1
statement --> jump-statement   ¡ñ 

state : 99		Size : 1
statement --> labeled-statement   ¡ñ 

state : 100		Size : 2
logical-OR-expression --> logical-AND-expression   ¡ñ 
logical-AND-expression --> logical-AND-expression   ¡ñ &&  inclusive-OR-expression  

state : 101		Size : 3
conditional-expression --> logical-OR-expression   ¡ñ 
conditional-expression --> logical-OR-expression   ¡ñ ?  expression  :  conditional-expression  
logical-OR-expression --> logical-OR-expression   ¡ñ ||  logical-AND-expression  

state : 102		Size : 4
additive-expression --> multiplicative-expression   ¡ñ 
multiplicative-expression --> multiplicative-expression   ¡ñ %  cast-expression  
multiplicative-expression --> multiplicative-expression   ¡ñ *  cast-expression  
multiplicative-expression --> multiplicative-expression   ¡ñ /  cast-expression  

state : 103		Size : 7
unary-expression --> postfix-expression   ¡ñ 
postfix-expression --> postfix-expression   ¡ñ (  )  
postfix-expression --> postfix-expression   ¡ñ (  argument-expression-list  )  
postfix-expression --> postfix-expression   ¡ñ ++  
postfix-expression --> postfix-expression   ¡ñ --  
postfix-expression --> postfix-expression   ¡ñ ->  identifier  
postfix-expression --> postfix-expression   ¡ñ [  expression  ]  

state : 104		Size : 1
postfix-expression --> primary-expression   ¡ñ 

state : 105		Size : 5
equality-expression --> relational-expression   ¡ñ 
relational-expression --> relational-expression   ¡ñ <  shift-expression  
relational-expression --> relational-expression   ¡ñ <=  shift-expression  
relational-expression --> relational-expression   ¡ñ >  shift-expression  
relational-expression --> relational-expression   ¡ñ >=  shift-expression  

state : 106		Size : 2
jump-statement --> return   ¡ñ ;  
jump-statement --> return   ¡ñ expression  ;  

state : 107		Size : 1
statement --> selection-statement   ¡ñ 

state : 108		Size : 3
relational-expression --> shift-expression   ¡ñ 
shift-expression --> shift-expression   ¡ñ <<  additive-expression  
shift-expression --> shift-expression   ¡ñ >>  additive-expression  

state : 109		Size : 2
unary-expression --> sizeof   ¡ñ (  type-name  )  
unary-expression --> sizeof   ¡ñ unary-expression  

state : 110		Size : 1
statement-list --> statement   ¡ñ 

state : 111		Size : 2
statement-list --> statement-list   ¡ñ statement  
compound-statement --> {  statement-list   ¡ñ }  

state : 112		Size : 1
constant --> string-constant   ¡ñ 

state : 113		Size : 1
selection-statement --> switch   ¡ñ (  expression  )  statement  

state : 114		Size : 2
cast-expression --> unary-expression   ¡ñ 
assignment-expression --> unary-expression   ¡ñ assignment-operator  assignment-expression  

state : 115		Size : 1
unary-expression --> unary-operator   ¡ñ cast-expression  

state : 116		Size : 1
iteration-statement --> while   ¡ñ (  expression  )  statement  

state : 117		Size : 1
compound-statement --> {  }   ¡ñ 

state : 118		Size : 1
unary-operator --> ~   ¡ñ 

state : 119		Size : 3
parameter-declaration --> declaration-specifiers   ¡ñ 
parameter-declaration --> declaration-specifiers   ¡ñ abstract-declarator  
parameter-declaration --> declaration-specifiers   ¡ñ declarator  

state : 120		Size : 1
direct-declarator --> direct-declarator  (  )   ¡ñ 

state : 121		Size : 2
direct-declarator --> direct-declarator  (  identifier-list   ¡ñ )  
identifier-list --> identifier-list   ¡ñ ,  identifier  

state : 122		Size : 1
direct-declarator --> direct-declarator  (  parameter-type-list   ¡ñ )  

state : 123		Size : 1
identifier-list --> identifier   ¡ñ 

state : 124		Size : 1
parameter-list --> parameter-declaration   ¡ñ 

state : 125		Size : 3
parameter-type-list --> parameter-list   ¡ñ 
parameter-type-list --> parameter-list   ¡ñ ,  ...  
parameter-list --> parameter-list   ¡ñ ,  parameter-declaration  

state : 126		Size : 1
constant-expression --> conditional-expression   ¡ñ 

state : 127		Size : 1
direct-declarator --> direct-declarator  [  ]   ¡ñ 

state : 128		Size : 1
direct-declarator --> direct-declarator  [  constant-expression   ¡ñ ]  

state : 129		Size : 1
primary-expression --> identifier   ¡ñ 

state : 130		Size : 1
cast-expression --> unary-expression   ¡ñ 

state : 131		Size : 1
function-definition --> declaration-specifiers  declarator  declaration-list  compound-statement   ¡ñ 

state : 132		Size : 1
initializer --> assignment-expression   ¡ñ 

state : 133		Size : 1
init-declarator --> declarator  =  initializer   ¡ñ 

state : 134		Size : 2
initializer --> {   ¡ñ initializer-list  ,  }  
initializer --> {   ¡ñ initializer-list  }  

state : 135		Size : 1
init-declarator-list --> init-declarator-list  ,  init-declarator   ¡ñ 

state : 136		Size : 2
primary-expression --> (  expression   ¡ñ )  
expression --> expression   ¡ñ ,  assignment-expression  

state : 137		Size : 1
cast-expression --> (  type-name   ¡ñ )  cast-expression  

state : 138		Size : 2
type-name --> specifier-qualifier-list   ¡ñ 
type-name --> specifier-qualifier-list   ¡ñ abstract-declarator  

state : 139		Size : 2
specifier-qualifier-list --> type-qualifier   ¡ñ 
specifier-qualifier-list --> type-qualifier   ¡ñ specifier-qualifier-list  

state : 140		Size : 2
specifier-qualifier-list --> type-specifier   ¡ñ 
specifier-qualifier-list --> type-specifier   ¡ñ specifier-qualifier-list  

state : 141		Size : 1
primary-expression --> (   ¡ñ expression  )  

state : 142		Size : 1
unary-expression --> ++  unary-expression   ¡ñ 

state : 143		Size : 1
unary-expression --> --  unary-expression   ¡ñ 

state : 144		Size : 1
AND-expression --> AND-expression  &   ¡ñ equality-expression  

state : 145		Size : 1
additive-expression --> additive-expression  +   ¡ñ multiplicative-expression  

state : 146		Size : 1
additive-expression --> additive-expression  -   ¡ñ multiplicative-expression  

state : 147		Size : 1
jump-statement --> break  ;   ¡ñ 

state : 148		Size : 1
labeled-statement --> case  constant-expression   ¡ñ :  statement  

state : 149		Size : 1
jump-statement --> continue  ;   ¡ñ 

state : 150		Size : 2
statement-list --> statement-list   ¡ñ statement  
compound-statement --> {  declaration-list  statement-list   ¡ñ }  

state : 151		Size : 1
compound-statement --> {  declaration-list  }   ¡ñ 

state : 152		Size : 1
labeled-statement --> default  :   ¡ñ statement  

state : 153		Size : 1
iteration-statement --> do  statement   ¡ñ while  (  expression  )  ;  

state : 154		Size : 1
equality-expression --> equality-expression  !=   ¡ñ relational-expression  

state : 155		Size : 1
equality-expression --> equality-expression  ==   ¡ñ relational-expression  

state : 156		Size : 1
exclusive-OR-expression --> exclusive-OR-expression  ^   ¡ñ AND-expression  

state : 157		Size : 1
expression --> expression  ,   ¡ñ assignment-expression  

state : 158		Size : 1
expression-statement --> expression  ;   ¡ñ 

state : 159		Size : 8
iteration-statement --> for  (   ¡ñ ;  ;  )  statement  
iteration-statement --> for  (   ¡ñ ;  ;  expression  )  statement  
iteration-statement --> for  (   ¡ñ ;  expression  ;  )  statement  
iteration-statement --> for  (   ¡ñ ;  expression  ;  expression  )  statement  
iteration-statement --> for  (   ¡ñ expression  ;  ;  )  statement  
iteration-statement --> for  (   ¡ñ expression  ;  ;  expression  )  statement  
iteration-statement --> for  (   ¡ñ expression  ;  expression  ;  )  statement  
iteration-statement --> for  (   ¡ñ expression  ;  expression  ;  expression  )  statement  

state : 160		Size : 1
jump-statement --> goto  identifier   ¡ñ ;  

state : 161		Size : 1
labeled-statement --> identifier  :   ¡ñ statement  

state : 162		Size : 2
selection-statement --> if  (   ¡ñ expression  )  statement  
selection-statement --> if  (   ¡ñ expression  )  statement  else  statement  

state : 163		Size : 1
inclusive-OR-expression --> inclusive-OR-expression  |   ¡ñ exclusive-OR-expression  

state : 164		Size : 1
logical-AND-expression --> logical-AND-expression  &&   ¡ñ inclusive-OR-expression  

state : 165		Size : 1
conditional-expression --> logical-OR-expression  ?   ¡ñ expression  :  conditional-expression  

state : 166		Size : 1
logical-OR-expression --> logical-OR-expression  ||   ¡ñ logical-AND-expression  

state : 167		Size : 1
multiplicative-expression --> multiplicative-expression  %   ¡ñ cast-expression  

state : 168		Size : 1
multiplicative-expression --> multiplicative-expression  *   ¡ñ cast-expression  

state : 169		Size : 1
multiplicative-expression --> multiplicative-expression  /   ¡ñ cast-expression  

state : 170		Size : 2
postfix-expression --> postfix-expression  (   ¡ñ )  
postfix-expression --> postfix-expression  (   ¡ñ argument-expression-list  )  

state : 171		Size : 1
postfix-expression --> postfix-expression  ++   ¡ñ 

state : 172		Size : 1
postfix-expression --> postfix-expression  --   ¡ñ 

state : 173		Size : 1
postfix-expression --> postfix-expression  ->   ¡ñ identifier  

state : 174		Size : 1
postfix-expression --> postfix-expression  [   ¡ñ expression  ]  

state : 175		Size : 1
relational-expression --> relational-expression  <   ¡ñ shift-expression  

state : 176		Size : 1
relational-expression --> relational-expression  <=   ¡ñ shift-expression  

state : 177		Size : 1
relational-expression --> relational-expression  >   ¡ñ shift-expression  

state : 178		Size : 1
relational-expression --> relational-expression  >=   ¡ñ shift-expression  

state : 179		Size : 2
expression --> expression   ¡ñ ,  assignment-expression  
jump-statement --> return  expression   ¡ñ ;  

state : 180		Size : 1
jump-statement --> return  ;   ¡ñ 

state : 181		Size : 1
shift-expression --> shift-expression  <<   ¡ñ additive-expression  

state : 182		Size : 1
shift-expression --> shift-expression  >>   ¡ñ additive-expression  

state : 183		Size : 2
primary-expression --> (   ¡ñ expression  )  
unary-expression --> sizeof  (   ¡ñ type-name  )  

state : 184		Size : 1
unary-expression --> sizeof  unary-expression   ¡ñ 

state : 185		Size : 1
statement-list --> statement-list  statement   ¡ñ 

state : 186		Size : 1
compound-statement --> {  statement-list  }   ¡ñ 

state : 187		Size : 1
selection-statement --> switch  (   ¡ñ expression  )  statement  

state : 188		Size : 1
assignment-operator --> %=   ¡ñ 

state : 189		Size : 1
assignment-operator --> &=   ¡ñ 

state : 190		Size : 1
assignment-operator --> *=   ¡ñ 

state : 191		Size : 1
assignment-operator --> +=   ¡ñ 

state : 192		Size : 1
assignment-operator --> -=   ¡ñ 

state : 193		Size : 1
assignment-operator --> /=   ¡ñ 

state : 194		Size : 1
assignment-operator --> <<=   ¡ñ 

state : 195		Size : 1
assignment-operator --> =   ¡ñ 

state : 196		Size : 1
assignment-operator --> >>=   ¡ñ 

state : 197		Size : 1
assignment-operator --> ^=   ¡ñ 

state : 198		Size : 1
assignment-expression --> unary-expression  assignment-operator   ¡ñ assignment-expression  

state : 199		Size : 1
assignment-operator --> |=   ¡ñ 

state : 200		Size : 1
unary-expression --> unary-operator  cast-expression   ¡ñ 

state : 201		Size : 1
iteration-statement --> while  (   ¡ñ expression  )  statement  

state : 202		Size : 4
direct-abstract-declarator --> (   ¡ñ )  
direct-abstract-declarator --> (   ¡ñ abstract-declarator  )  
direct-declarator --> (   ¡ñ declarator  )  
direct-abstract-declarator --> (   ¡ñ parameter-type-list  )  

state : 203		Size : 2
direct-abstract-declarator --> [   ¡ñ ]  
direct-abstract-declarator --> [   ¡ñ constant-expression  ]  

state : 204		Size : 1
parameter-declaration --> declaration-specifiers  abstract-declarator   ¡ñ 

state : 205		Size : 1
parameter-declaration --> declaration-specifiers  declarator   ¡ñ 

state : 206		Size : 5
abstract-declarator --> direct-abstract-declarator   ¡ñ 
direct-abstract-declarator --> direct-abstract-declarator   ¡ñ (  )  
direct-abstract-declarator --> direct-abstract-declarator   ¡ñ (  parameter-type-list  )  
direct-abstract-declarator --> direct-abstract-declarator   ¡ñ [  ]  
direct-abstract-declarator --> direct-abstract-declarator   ¡ñ [  constant-expression  ]  

state : 207		Size : 3
abstract-declarator --> pointer   ¡ñ 
abstract-declarator --> pointer   ¡ñ direct-abstract-declarator  
declarator --> pointer   ¡ñ direct-declarator  

state : 208		Size : 1
direct-declarator --> direct-declarator  (  identifier-list  )   ¡ñ 

state : 209		Size : 1
identifier-list --> identifier-list  ,   ¡ñ identifier  

state : 210		Size : 1
direct-declarator --> direct-declarator  (  parameter-type-list  )   ¡ñ 

state : 211		Size : 2
parameter-type-list --> parameter-list  ,   ¡ñ ...  
parameter-list --> parameter-list  ,   ¡ñ parameter-declaration  

state : 212		Size : 1
direct-declarator --> direct-declarator  [  constant-expression  ]   ¡ñ 

state : 213		Size : 1
initializer-list --> initializer   ¡ñ 

state : 214		Size : 3
initializer-list --> initializer-list   ¡ñ ,  initializer  
initializer --> {  initializer-list   ¡ñ ,  }  
initializer --> {  initializer-list   ¡ñ }  

state : 215		Size : 1
primary-expression --> (  expression  )   ¡ñ 

state : 216		Size : 1
cast-expression --> (  type-name  )   ¡ñ cast-expression  

state : 217		Size : 3
direct-abstract-declarator --> (   ¡ñ )  
direct-abstract-declarator --> (   ¡ñ abstract-declarator  )  
direct-abstract-declarator --> (   ¡ñ parameter-type-list  )  

state : 218		Size : 2
abstract-declarator --> pointer   ¡ñ 
abstract-declarator --> pointer   ¡ñ direct-abstract-declarator  

state : 219		Size : 1
type-name --> specifier-qualifier-list  abstract-declarator   ¡ñ 

state : 220		Size : 1
specifier-qualifier-list --> type-qualifier  specifier-qualifier-list   ¡ñ 

state : 221		Size : 1
specifier-qualifier-list --> type-specifier  specifier-qualifier-list   ¡ñ 

state : 222		Size : 3
AND-expression --> AND-expression  &  equality-expression   ¡ñ 
equality-expression --> equality-expression   ¡ñ !=  relational-expression  
equality-expression --> equality-expression   ¡ñ ==  relational-expression  

state : 223		Size : 4
additive-expression --> additive-expression  +  multiplicative-expression   ¡ñ 
multiplicative-expression --> multiplicative-expression   ¡ñ %  cast-expression  
multiplicative-expression --> multiplicative-expression   ¡ñ *  cast-expression  
multiplicative-expression --> multiplicative-expression   ¡ñ /  cast-expression  

state : 224		Size : 4
additive-expression --> additive-expression  -  multiplicative-expression   ¡ñ 
multiplicative-expression --> multiplicative-expression   ¡ñ %  cast-expression  
multiplicative-expression --> multiplicative-expression   ¡ñ *  cast-expression  
multiplicative-expression --> multiplicative-expression   ¡ñ /  cast-expression  

state : 225		Size : 1
labeled-statement --> case  constant-expression  :   ¡ñ statement  

state : 226		Size : 1
compound-statement --> {  declaration-list  statement-list  }   ¡ñ 

state : 227		Size : 1
labeled-statement --> default  :  statement   ¡ñ 

state : 228		Size : 1
iteration-statement --> do  statement  while   ¡ñ (  expression  )  ;  

state : 229		Size : 5
equality-expression --> equality-expression  !=  relational-expression   ¡ñ 
relational-expression --> relational-expression   ¡ñ <  shift-expression  
relational-expression --> relational-expression   ¡ñ <=  shift-expression  
relational-expression --> relational-expression   ¡ñ >  shift-expression  
relational-expression --> relational-expression   ¡ñ >=  shift-expression  

state : 230		Size : 5
equality-expression --> equality-expression  ==  relational-expression   ¡ñ 
relational-expression --> relational-expression   ¡ñ <  shift-expression  
relational-expression --> relational-expression   ¡ñ <=  shift-expression  
relational-expression --> relational-expression   ¡ñ >  shift-expression  
relational-expression --> relational-expression   ¡ñ >=  shift-expression  

state : 231		Size : 2
AND-expression --> AND-expression   ¡ñ &  equality-expression  
exclusive-OR-expression --> exclusive-OR-expression  ^  AND-expression   ¡ñ 

state : 232		Size : 1
expression --> expression  ,  assignment-expression   ¡ñ 

state : 233		Size : 5
expression --> expression   ¡ñ ,  assignment-expression  
iteration-statement --> for  (  expression   ¡ñ ;  ;  )  statement  
iteration-statement --> for  (  expression   ¡ñ ;  ;  expression  )  statement  
iteration-statement --> for  (  expression   ¡ñ ;  expression  ;  )  statement  
iteration-statement --> for  (  expression   ¡ñ ;  expression  ;  expression  )  statement  

state : 234		Size : 4
iteration-statement --> for  (  ;   ¡ñ ;  )  statement  
iteration-statement --> for  (  ;   ¡ñ ;  expression  )  statement  
iteration-statement --> for  (  ;   ¡ñ expression  ;  )  statement  
iteration-statement --> for  (  ;   ¡ñ expression  ;  expression  )  statement  

state : 235		Size : 1
jump-statement --> goto  identifier  ;   ¡ñ 

state : 236		Size : 1
labeled-statement --> identifier  :  statement   ¡ñ 

state : 237		Size : 3
expression --> expression   ¡ñ ,  assignment-expression  
selection-statement --> if  (  expression   ¡ñ )  statement  
selection-statement --> if  (  expression   ¡ñ )  statement  else  statement  

state : 238		Size : 2
exclusive-OR-expression --> exclusive-OR-expression   ¡ñ ^  AND-expression  
inclusive-OR-expression --> inclusive-OR-expression  |  exclusive-OR-expression   ¡ñ 

state : 239		Size : 2
inclusive-OR-expression --> inclusive-OR-expression   ¡ñ |  exclusive-OR-expression  
logical-AND-expression --> logical-AND-expression  &&  inclusive-OR-expression   ¡ñ 

state : 240		Size : 2
expression --> expression   ¡ñ ,  assignment-expression  
conditional-expression --> logical-OR-expression  ?  expression   ¡ñ :  conditional-expression  

state : 241		Size : 2
logical-AND-expression --> logical-AND-expression   ¡ñ &&  inclusive-OR-expression  
logical-OR-expression --> logical-OR-expression  ||  logical-AND-expression   ¡ñ 

state : 242		Size : 1
multiplicative-expression --> multiplicative-expression  %  cast-expression   ¡ñ 

state : 243		Size : 1
multiplicative-expression --> multiplicative-expression  *  cast-expression   ¡ñ 

state : 244		Size : 1
multiplicative-expression --> multiplicative-expression  /  cast-expression   ¡ñ 

state : 245		Size : 2
argument-expression-list --> argument-expression-list   ¡ñ ,  assignment-expression  
postfix-expression --> postfix-expression  (  argument-expression-list   ¡ñ )  

state : 246		Size : 1
argument-expression-list --> assignment-expression   ¡ñ 

state : 247		Size : 1
postfix-expression --> postfix-expression  (  )   ¡ñ 

state : 248		Size : 1
postfix-expression --> postfix-expression  ->  identifier   ¡ñ 

state : 249		Size : 2
expression --> expression   ¡ñ ,  assignment-expression  
postfix-expression --> postfix-expression  [  expression   ¡ñ ]  

state : 250		Size : 3
relational-expression --> relational-expression  <  shift-expression   ¡ñ 
shift-expression --> shift-expression   ¡ñ <<  additive-expression  
shift-expression --> shift-expression   ¡ñ >>  additive-expression  

state : 251		Size : 3
relational-expression --> relational-expression  <=  shift-expression   ¡ñ 
shift-expression --> shift-expression   ¡ñ <<  additive-expression  
shift-expression --> shift-expression   ¡ñ >>  additive-expression  

state : 252		Size : 3
relational-expression --> relational-expression  >  shift-expression   ¡ñ 
shift-expression --> shift-expression   ¡ñ <<  additive-expression  
shift-expression --> shift-expression   ¡ñ >>  additive-expression  

state : 253		Size : 3
relational-expression --> relational-expression  >=  shift-expression   ¡ñ 
shift-expression --> shift-expression   ¡ñ <<  additive-expression  
shift-expression --> shift-expression   ¡ñ >>  additive-expression  

state : 254		Size : 1
jump-statement --> return  expression  ;   ¡ñ 

state : 255		Size : 3
additive-expression --> additive-expression   ¡ñ +  multiplicative-expression  
additive-expression --> additive-expression   ¡ñ -  multiplicative-expression  
shift-expression --> shift-expression  <<  additive-expression   ¡ñ 

state : 256		Size : 3
additive-expression --> additive-expression   ¡ñ +  multiplicative-expression  
additive-expression --> additive-expression   ¡ñ -  multiplicative-expression  
shift-expression --> shift-expression  >>  additive-expression   ¡ñ 

state : 257		Size : 1
unary-expression --> sizeof  (  type-name   ¡ñ )  

state : 258		Size : 2
expression --> expression   ¡ñ ,  assignment-expression  
selection-statement --> switch  (  expression   ¡ñ )  statement  

state : 259		Size : 1
assignment-expression --> unary-expression  assignment-operator  assignment-expression   ¡ñ 

state : 260		Size : 2
expression --> expression   ¡ñ ,  assignment-expression  
iteration-statement --> while  (  expression   ¡ñ )  statement  

state : 261		Size : 1
direct-abstract-declarator --> (  )   ¡ñ 

state : 262		Size : 1
direct-abstract-declarator --> (  abstract-declarator   ¡ñ )  

state : 263		Size : 1
direct-abstract-declarator --> (  parameter-type-list   ¡ñ )  

state : 264		Size : 1
direct-abstract-declarator --> [  ]   ¡ñ 

state : 265		Size : 1
direct-abstract-declarator --> [  constant-expression   ¡ñ ]  

state : 266		Size : 2
direct-abstract-declarator --> direct-abstract-declarator  (   ¡ñ )  
direct-abstract-declarator --> direct-abstract-declarator  (   ¡ñ parameter-type-list  )  

state : 267		Size : 2
direct-abstract-declarator --> direct-abstract-declarator  [   ¡ñ ]  
direct-abstract-declarator --> direct-abstract-declarator  [   ¡ñ constant-expression  ]  

state : 268		Size : 5
direct-abstract-declarator --> direct-abstract-declarator   ¡ñ (  )  
direct-abstract-declarator --> direct-abstract-declarator   ¡ñ (  parameter-type-list  )  
direct-abstract-declarator --> direct-abstract-declarator   ¡ñ [  ]  
direct-abstract-declarator --> direct-abstract-declarator   ¡ñ [  constant-expression  ]  
abstract-declarator --> pointer  direct-abstract-declarator   ¡ñ 

state : 269		Size : 1
identifier-list --> identifier-list  ,  identifier   ¡ñ 

state : 270		Size : 1
parameter-type-list --> parameter-list  ,  ...   ¡ñ 

state : 271		Size : 1
parameter-list --> parameter-list  ,  parameter-declaration   ¡ñ 

state : 272		Size : 2
initializer-list --> initializer-list  ,   ¡ñ initializer  
initializer --> {  initializer-list  ,   ¡ñ }  

state : 273		Size : 1
initializer --> {  initializer-list  }   ¡ñ 

state : 274		Size : 1
cast-expression --> (  type-name  )  cast-expression   ¡ñ 

state : 275		Size : 1
labeled-statement --> case  constant-expression  :  statement   ¡ñ 

state : 276		Size : 1
iteration-statement --> do  statement  while  (   ¡ñ expression  )  ;  

state : 277		Size : 4
iteration-statement --> for  (  expression  ;   ¡ñ ;  )  statement  
iteration-statement --> for  (  expression  ;   ¡ñ ;  expression  )  statement  
iteration-statement --> for  (  expression  ;   ¡ñ expression  ;  )  statement  
iteration-statement --> for  (  expression  ;   ¡ñ expression  ;  expression  )  statement  

state : 278		Size : 3
expression --> expression   ¡ñ ,  assignment-expression  
iteration-statement --> for  (  ;  expression   ¡ñ ;  )  statement  
iteration-statement --> for  (  ;  expression   ¡ñ ;  expression  )  statement  

state : 279		Size : 2
iteration-statement --> for  (  ;  ;   ¡ñ )  statement  
iteration-statement --> for  (  ;  ;   ¡ñ expression  )  statement  

state : 280		Size : 2
selection-statement --> if  (  expression  )   ¡ñ statement  
selection-statement --> if  (  expression  )   ¡ñ statement  else  statement  

state : 281		Size : 1
conditional-expression --> logical-OR-expression  ?  expression  :   ¡ñ conditional-expression  

state : 282		Size : 1
argument-expression-list --> argument-expression-list  ,   ¡ñ assignment-expression  

state : 283		Size : 1
postfix-expression --> postfix-expression  (  argument-expression-list  )   ¡ñ 

state : 284		Size : 1
postfix-expression --> postfix-expression  [  expression  ]   ¡ñ 

state : 285		Size : 1
unary-expression --> sizeof  (  type-name  )   ¡ñ 

state : 286		Size : 1
selection-statement --> switch  (  expression  )   ¡ñ statement  

state : 287		Size : 1
iteration-statement --> while  (  expression  )   ¡ñ statement  

state : 288		Size : 1
direct-abstract-declarator --> (  abstract-declarator  )   ¡ñ 

state : 289		Size : 1
direct-abstract-declarator --> (  parameter-type-list  )   ¡ñ 

state : 290		Size : 1
direct-abstract-declarator --> [  constant-expression  ]   ¡ñ 

state : 291		Size : 1
direct-abstract-declarator --> direct-abstract-declarator  (  )   ¡ñ 

state : 292		Size : 1
direct-abstract-declarator --> direct-abstract-declarator  (  parameter-type-list   ¡ñ )  

state : 293		Size : 1
direct-abstract-declarator --> direct-abstract-declarator  [  ]   ¡ñ 

state : 294		Size : 1
direct-abstract-declarator --> direct-abstract-declarator  [  constant-expression   ¡ñ ]  

state : 295		Size : 1
initializer-list --> initializer-list  ,  initializer   ¡ñ 

state : 296		Size : 1
initializer --> {  initializer-list  ,  }   ¡ñ 

state : 297		Size : 2
iteration-statement --> do  statement  while  (  expression   ¡ñ )  ;  
expression --> expression   ¡ñ ,  assignment-expression  

state : 298		Size : 3
expression --> expression   ¡ñ ,  assignment-expression  
iteration-statement --> for  (  expression  ;  expression   ¡ñ ;  )  statement  
iteration-statement --> for  (  expression  ;  expression   ¡ñ ;  expression  )  statement  

state : 299		Size : 2
iteration-statement --> for  (  expression  ;  ;   ¡ñ )  statement  
iteration-statement --> for  (  expression  ;  ;   ¡ñ expression  )  statement  

state : 300		Size : 2
iteration-statement --> for  (  ;  expression  ;   ¡ñ )  statement  
iteration-statement --> for  (  ;  expression  ;   ¡ñ expression  )  statement  

state : 301		Size : 2
expression --> expression   ¡ñ ,  assignment-expression  
iteration-statement --> for  (  ;  ;  expression   ¡ñ )  statement  

state : 302		Size : 1
iteration-statement --> for  (  ;  ;  )   ¡ñ statement  

state : 303		Size : 2
selection-statement --> if  (  expression  )  statement   ¡ñ 
selection-statement --> if  (  expression  )  statement   ¡ñ else  statement  

state : 304		Size : 1
conditional-expression --> logical-OR-expression  ?  expression  :  conditional-expression   ¡ñ 

state : 305		Size : 1
argument-expression-list --> argument-expression-list  ,  assignment-expression   ¡ñ 

state : 306		Size : 1
selection-statement --> switch  (  expression  )  statement   ¡ñ 

state : 307		Size : 1
iteration-statement --> while  (  expression  )  statement   ¡ñ 

state : 308		Size : 1
direct-abstract-declarator --> direct-abstract-declarator  (  parameter-type-list  )   ¡ñ 

state : 309		Size : 1
direct-abstract-declarator --> direct-abstract-declarator  [  constant-expression  ]   ¡ñ 

state : 310		Size : 1
iteration-statement --> do  statement  while  (  expression  )   ¡ñ ;  

state : 311		Size : 2
iteration-statement --> for  (  expression  ;  expression  ;   ¡ñ )  statement  
iteration-statement --> for  (  expression  ;  expression  ;   ¡ñ expression  )  statement  

state : 312		Size : 2
expression --> expression   ¡ñ ,  assignment-expression  
iteration-statement --> for  (  expression  ;  ;  expression   ¡ñ )  statement  

state : 313		Size : 1
iteration-statement --> for  (  expression  ;  ;  )   ¡ñ statement  

state : 314		Size : 2
expression --> expression   ¡ñ ,  assignment-expression  
iteration-statement --> for  (  ;  expression  ;  expression   ¡ñ )  statement  

state : 315		Size : 1
iteration-statement --> for  (  ;  expression  ;  )   ¡ñ statement  

state : 316		Size : 1
iteration-statement --> for  (  ;  ;  expression  )   ¡ñ statement  

state : 317		Size : 1
iteration-statement --> for  (  ;  ;  )  statement   ¡ñ 

state : 318		Size : 1
selection-statement --> if  (  expression  )  statement  else   ¡ñ statement  

state : 319		Size : 1
iteration-statement --> do  statement  while  (  expression  )  ;   ¡ñ 

state : 320		Size : 2
expression --> expression   ¡ñ ,  assignment-expression  
iteration-statement --> for  (  expression  ;  expression  ;  expression   ¡ñ )  statement  

state : 321		Size : 1
iteration-statement --> for  (  expression  ;  expression  ;  )   ¡ñ statement  

state : 322		Size : 1
iteration-statement --> for  (  expression  ;  ;  expression  )   ¡ñ statement  

state : 323		Size : 1
iteration-statement --> for  (  expression  ;  ;  )  statement   ¡ñ 

state : 324		Size : 1
iteration-statement --> for  (  ;  expression  ;  expression  )   ¡ñ statement  

state : 325		Size : 1
iteration-statement --> for  (  ;  expression  ;  )  statement   ¡ñ 

state : 326		Size : 1
iteration-statement --> for  (  ;  ;  expression  )  statement   ¡ñ 

state : 327		Size : 1
selection-statement --> if  (  expression  )  statement  else  statement   ¡ñ 

state : 328		Size : 1
iteration-statement --> for  (  expression  ;  expression  ;  expression  )   ¡ñ statement  

state : 329		Size : 1
iteration-statement --> for  (  expression  ;  expression  ;  )  statement   ¡ñ 

state : 330		Size : 1
iteration-statement --> for  (  expression  ;  ;  expression  )  statement   ¡ñ 

state : 331		Size : 1
iteration-statement --> for  (  ;  expression  ;  expression  )  statement   ¡ñ 

state : 332		Size : 1
iteration-statement --> for  (  expression  ;  expression  ;  expression  )  statement   ¡ñ 

Totall LR(0) States is : 333


Broadcast Information:

state: 0
state: 1
state: 2
state: 3
state: 4
state: 5
state: 6
state: 7
state: 8
state: 9
state: 10
state: 11
state: 12
state: 13
state: 14
state: 15
state: 16
state: 17
state: 18
state: 19
state: 20
state: 21
state: 22
state: 23
state: 24
state: 25
state: 26
state: 27
state: 28
state: 29
state: 30
state: 31
state: 32
state: 33
state: 34
state: 35
state: 36
state: 37
state: 38
state: 39
state: 40
state: 41
state: 42
state: 43
state: 44
state: 45
state: 46
state: 47
state: 48
state: 49
state: 50
state: 51
state: 52
state: 53
state: 54
state: 55
state: 56
state: 57
state: 58
state: 59
state: 60
state: 61
state: 62
state: 63
state: 64
state: 65
state: 66
state: 67
state: 68
state: 69
state: 70
state: 71
state: 72
state: 73
state: 74
state: 75
state: 76
state: 77
state: 78
state: 79
state: 80
state: 81
state: 82
state: 83
state: 84
state: 85
state: 86
state: 87
state: 88
state: 89
state: 90
state: 91
state: 92
state: 93
state: 94
state: 95
state: 96
state: 97
state: 98
state: 99
state: 100
state: 101
state: 102
state: 103
state: 104
state: 105
state: 106
state: 107
state: 108
state: 109
state: 110
state: 111
state: 112
state: 113
state: 114
state: 115
state: 116
state: 117
state: 118
state: 119
state: 120
state: 121
state: 122
state: 123
state: 124
state: 125
state: 126
state: 127
state: 128
state: 129
state: 130
state: 131
state: 132
state: 133
state: 134
state: 135
state: 136
state: 137
state: 138
state: 139
state: 140
state: 141
state: 142
state: 143
state: 144
state: 145
state: 146
state: 147
state: 148
state: 149
state: 150
state: 151
state: 152
state: 153
state: 154
state: 155
state: 156
state: 157
state: 158
state: 159
state: 160
state: 161
state: 162
state: 163
state: 164
state: 165
state: 166
state: 167
state: 168
state: 169
state: 170
state: 171
state: 172
state: 173
state: 174
state: 175
state: 176
state: 177
state: 178
state: 179
state: 180
state: 181
state: 182
state: 183
state: 184
state: 185
state: 186
state: 187
state: 188
state: 189
state: 190
state: 191
state: 192
state: 193
state: 194
state: 195
state: 196
state: 197
state: 198
state: 199
state: 200
state: 201
state: 202
state: 203
state: 204
state: 205
state: 206
state: 207
state: 208
state: 209
state: 210
state: 211
state: 212
state: 213
state: 214
state: 215
state: 216
state: 217
state: 218
state: 219
state: 220
state: 221
state: 222
state: 223
state: 224
state: 225
state: 226
state: 227
state: 228
state: 229
state: 230
state: 231
state: 232
state: 233
state: 234
state: 235
state: 236
state: 237
state: 238
state: 239
state: 240
state: 241
state: 242
state: 243
state: 244
state: 245
state: 246
state: 247
state: 248
state: 249
state: 250
state: 251
state: 252
state: 253
state: 254
state: 255
state: 256
state: 257
state: 258
state: 259
state: 260
state: 261
state: 262
state: 263
state: 264
state: 265
state: 266
state: 267
state: 268
state: 269
state: 270
state: 271
state: 272
state: 273
state: 274
state: 275
state: 276
state: 277
state: 278
state: 279
state: 280
state: 281
state: 282
state: 283
state: 284
state: 285
state: 286
state: 287
state: 288
state: 289
state: 290
state: 291
state: 292
state: 293
state: 294
state: 295
state: 296
state: 297
state: 298
state: 299
state: 300
state: 301
state: 302
state: 303
state: 304
state: 305
state: 306
state: 307
state: 308
state: 309
state: 310
state: 311
state: 312
state: 313
state: 314
state: 315
state: 316
state: 317
state: 318
state: 319
state: 320
state: 321
state: 322
state: 323
state: 324
state: 325
state: 326
state: 327
state: 328
state: 329
state: 330
state: 331
state: 332

Begin Broadcast :


Build Action ,Goto Chart !


		Grammar Computer Succeeded !



Begin Analysis!
Move in :	int
Reduce :	type-specifier --> int 
Reduce :	declaration-specifiers --> type-specifier 
Move in :	globalvariable
Reduce :	direct-declarator --> identifier 
Reduce :	declarator --> direct-declarator 
Reduce :	init-declarator --> declarator 
Reduce :	init-declarator-list --> init-declarator 
Move in :	;
Reduce :	declaration --> declaration-specifiers init-declarator-list ; 
Reduce :	external-declaration --> declaration 
Reduce :	translation-unit --> external-declaration 
Move in :	char
Reduce :	type-specifier --> char 
Reduce :	declaration-specifiers --> type-specifier 
Move in :	hello
Reduce :	direct-declarator --> identifier 
Reduce :	declarator --> direct-declarator 
Reduce :	init-declarator --> declarator 
Reduce :	init-declarator-list --> init-declarator 
Move in :	;
Reduce :	declaration --> declaration-specifiers init-declarator-list ; 
Reduce :	external-declaration --> declaration 
Reduce :	translation-unit --> translation-unit external-declaration 
Move in :	int
Reduce :	type-specifier --> int 
Reduce :	declaration-specifiers --> type-specifier 
Move in :	func
Reduce :	direct-declarator --> identifier 
Move in :	(
Move in :	int
Reduce :	type-specifier --> int 
Reduce :	declaration-specifiers --> type-specifier 
Move in :	arg
Reduce :	direct-declarator --> identifier 
Reduce :	declarator --> direct-declarator 
Reduce :	parameter-declaration --> declaration-specifiers declarator 
Reduce :	parameter-list --> parameter-declaration 
Move in :	,
Move in :	int
Reduce :	type-specifier --> int 
Reduce :	declaration-specifiers --> type-specifier 
Move in :	kulv
Reduce :	direct-declarator --> identifier 
Reduce :	declarator --> direct-declarator 
Reduce :	parameter-declaration --> declaration-specifiers declarator 
Reduce :	parameter-list --> parameter-list , parameter-declaration 
Reduce :	parameter-type-list --> parameter-list 
Move in :	)
Reduce :	direct-declarator --> direct-declarator ( parameter-type-list ) 
Reduce :	declarator --> direct-declarator 
Move in :	{
Move in :	short
Reduce :	type-specifier --> short 
Reduce :	declaration-specifiers --> type-specifier 
Move in :	hello
Reduce :	direct-declarator --> identifier 
Reduce :	declarator --> direct-declarator 
Reduce :	init-declarator --> declarator 
Reduce :	init-declarator-list --> init-declarator 
Move in :	;
Reduce :	declaration --> declaration-specifiers init-declarator-list ; 
Reduce :	declaration-list --> declaration 
Move in :	hello
Reduce :	primary-expression --> identifier 
Reduce :	postfix-expression --> primary-expression 
Reduce :	unary-expression --> postfix-expression 
Move in :	=
Reduce :	assignment-operator --> = 
Move in :	hello
Reduce :	primary-expression --> identifier 
Reduce :	postfix-expression --> primary-expression 
Reduce :	unary-expression --> postfix-expression 
Reduce :	cast-expression --> unary-expression 
Reduce :	multiplicative-expression --> cast-expression 
Move in :	*
Move in :	3
Reduce :	constant --> integer-constant 
Reduce :	primary-expression --> constant 
Reduce :	postfix-expression --> primary-expression 
Reduce :	unary-expression --> postfix-expression 
Reduce :	cast-expression --> unary-expression 
Reduce :	multiplicative-expression --> multiplicative-expression * cast-expression 
Reduce :	additive-expression --> multiplicative-expression 
Move in :	+
Move in :	10
Reduce :	constant --> integer-constant 
Reduce :	primary-expression --> constant 
Reduce :	postfix-expression --> primary-expression 
Reduce :	unary-expression --> postfix-expression 
Reduce :	cast-expression --> unary-expression 
Reduce :	multiplicative-expression --> cast-expression 
Reduce :	additive-expression --> additive-expression + multiplicative-expression 
Reduce :	shift-expression --> additive-expression 
Reduce :	relational-expression --> shift-expression 
Reduce :	equality-expression --> relational-expression 
Reduce :	AND-expression --> equality-expression 
Reduce :	exclusive-OR-expression --> AND-expression 
Reduce :	inclusive-OR-expression --> exclusive-OR-expression 
Reduce :	logical-AND-expression --> inclusive-OR-expression 
Reduce :	logical-OR-expression --> logical-AND-expression 
Reduce :	conditional-expression --> logical-OR-expression 
Reduce :	assignment-expression --> conditional-expression 
Reduce :	assignment-expression --> unary-expression assignment-operator assignment-expression 
Reduce :	expression --> assignment-expression 
Move in :	;
Reduce :	expression-statement --> expression ; 
Reduce :	statement --> expression-statement 
Reduce :	statement-list --> statement 
Move in :	}
Reduce :	compound-statement --> { declaration-list statement-list } 
Reduce :	function-definition --> declaration-specifiers declarator compound-statement 
Reduce :	external-declaration --> function-definition 
Reduce :	translation-unit --> translation-unit external-declaration 
Move in :	int
Reduce :	type-specifier --> int 
Reduce :	declaration-specifiers --> type-specifier 
Move in :	kulv
Reduce :	direct-declarator --> identifier 
Move in :	(
Move in :	)
Reduce :	direct-declarator --> direct-declarator ( ) 
Reduce :	declarator --> direct-declarator 
Move in :	{
Move in :	int
Reduce :	type-specifier --> int 
Reduce :	declaration-specifiers --> type-specifier 
Move in :	hello
Reduce :	direct-declarator --> identifier 
Reduce :	declarator --> direct-declarator 
Reduce :	init-declarator --> declarator 
Reduce :	init-declarator-list --> init-declarator 
Move in :	;
Reduce :	declaration --> declaration-specifiers init-declarator-list ; 
Reduce :	declaration-list --> declaration 
Move in :	}
Reduce :	compound-statement --> { declaration-list } 
Reduce :	function-definition --> declaration-specifiers declarator compound-statement 
Reduce :	external-declaration --> function-definition 
Reduce :	translation-unit --> translation-unit external-declaration 

			½ÓÊÕ£¬Óï·¨·ÖÎöÍê³É£¡£¡

		Grammar Analysis Succeed ! Your code is legal !


Begin Time : 	22:44:28
End Time : 	22:45:9

end 
